<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://adrhill.github.io/iclr2025-sparse-autodiff/feed.xml" rel="self" type="application/atom+xml"/><link href="https://adrhill.github.io/iclr2025-sparse-autodiff/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-16T02:06:09+08:00</updated><id>https://adrhill.github.io/iclr2025-sparse-autodiff/feed.xml</id><title type="html">ICLR Blogposts 2025</title><subtitle>Home to the 2025 ICLR Blogposts track </subtitle><entry><title type="html">Sample Blog Post</title><link href="https://adrhill.github.io/iclr2025-sparse-autodiff/blog/distill-example/" rel="alternate" type="text/html" title="Sample Blog Post"/><published>2025-04-28T00:00:00+08:00</published><updated>2025-04-28T00:00:00+08:00</updated><id>https://adrhill.github.io/iclr2025-sparse-autodiff/blog/distill-example</id><content type="html" xml:base="https://adrhill.github.io/iclr2025-sparse-autodiff/blog/distill-example/"><![CDATA[<p>Note: please use the table of contents as defined in the front matter rather than the traditional markdown styling.</p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. To include images in your submission in this way, you must do something like the following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include figure.html path="assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" %}
</code></pre></div></div> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To ensure that there are no namespace conflicts, you must save your asset to your unique directory <code class="language-plaintext highlighter-rouge">/assets/img/2025-04-28-[SUBMISSION NAME]</code> within your submission.</p> <p>Please avoid using the direct markdown method of embedding images; they may not be properly resized. Some more complex ways to load images (note the different styles of the shapes/shadows):</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="interactive-figures">Interactive Figures</h3> <p>Here’s how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work (<strong>no extra javascript is allowed!</strong>). All that’s required is for you to export your figure into HTML format, and make sure that the file exists in the <code class="language-plaintext highlighter-rouge">assets/html/[SUBMISSION NAME]/</code> directory in this repository’s root directory. To embed it into any page, simply insert the following code anywhere into your page.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% include [FIGURE_NAME].html %} 
</code></pre></div></div> <p>For example, the following code can be used to generate the figure underneath it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span><span class="p">)</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
    <span class="n">df</span><span class="p">,</span> <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span> <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">./assets/html/2025-04-28-distill-example/plotly_demo_1.html</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>And then include it with the following:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"l-page"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"{{ 'assets/html/2025-04-28-distill-example/plotly_demo_1.html' | relative_url }}"</span> <span class="na">frameborder=</span><span class="s">'0'</span> <span class="na">scrolling=</span><span class="s">'no'</span> <span class="na">height=</span><span class="s">"600px"</span> <span class="na">width=</span><span class="s">"100%"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>Voila!</p> <div class="l-page"> <iframe src="/iclr2025-sparse-autodiff/assets/html/2025-04-28-distill-example/plotly_demo_1.html" frameborder="0" scrolling="no" height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. You can try toggling it on or off yourself below:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="diagrams">Diagrams</h2> <p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the first time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <p><strong>Note:</strong> This is not supported for local rendering!</p> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1731693973332" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1731693973332 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1731693973332 .node circle,#mermaid-1731693973332 .node ellipse,#mermaid-1731693973332 .node polygon,#mermaid-1731693973332 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1731693973332 .node.clickable{cursor:pointer}#mermaid-1731693973332 .arrowheadPath{fill:#333}#mermaid-1731693973332 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1731693973332 .edgeLabel{background-color:#e8e8e8}#mermaid-1731693973332 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1731693973332 .cluster text{fill:#333}#mermaid-1731693973332 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1731693973332 .actor{stroke:#ccf;fill:#ececff}#mermaid-1731693973332 text.actor{fill:#000;stroke:none}#mermaid-1731693973332 .actor-line{stroke:grey}#mermaid-1731693973332 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1731693973332 .messageLine0,#mermaid-1731693973332 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1731693973332 #arrowhead{fill:#333}#mermaid-1731693973332 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1731693973332 .messageText{fill:#333;stroke:none}#mermaid-1731693973332 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1731693973332 .labelText,#mermaid-1731693973332 .loopText{fill:#000;stroke:none}#mermaid-1731693973332 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1731693973332 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1731693973332 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1731693973332 .section{stroke:none;opacity:.2}#mermaid-1731693973332 .section0{fill:rgba(102,102,255,.49)}#mermaid-1731693973332 .section2{fill:#fff400}#mermaid-1731693973332 .section1,#mermaid-1731693973332 .section3{fill:#fff;opacity:.2}#mermaid-1731693973332 .sectionTitle0,#mermaid-1731693973332 .sectionTitle1,#mermaid-1731693973332 .sectionTitle2,#mermaid-1731693973332 .sectionTitle3{fill:#333}#mermaid-1731693973332 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1731693973332 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1731693973332 .grid path{stroke-width:0}#mermaid-1731693973332 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1731693973332 .task{stroke-width:2}#mermaid-1731693973332 .taskText{text-anchor:middle;font-size:11px}#mermaid-1731693973332 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1731693973332 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1731693973332 .taskText0,#mermaid-1731693973332 .taskText1,#mermaid-1731693973332 .taskText2,#mermaid-1731693973332 .taskText3{fill:#fff}#mermaid-1731693973332 .task0,#mermaid-1731693973332 .task1,#mermaid-1731693973332 .task2,#mermaid-1731693973332 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1731693973332 .taskTextOutside0,#mermaid-1731693973332 .taskTextOutside1,#mermaid-1731693973332 .taskTextOutside2,#mermaid-1731693973332 .taskTextOutside3{fill:#000}#mermaid-1731693973332 .active0,#mermaid-1731693973332 .active1,#mermaid-1731693973332 .active2,#mermaid-1731693973332 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1731693973332 .activeText0,#mermaid-1731693973332 .activeText1,#mermaid-1731693973332 .activeText2,#mermaid-1731693973332 .activeText3{fill:#000!important}#mermaid-1731693973332 .done0,#mermaid-1731693973332 .done1,#mermaid-1731693973332 .done2,#mermaid-1731693973332 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1731693973332 .doneText0,#mermaid-1731693973332 .doneText1,#mermaid-1731693973332 .doneText2,#mermaid-1731693973332 .doneText3{fill:#000!important}#mermaid-1731693973332 .crit0,#mermaid-1731693973332 .crit1,#mermaid-1731693973332 .crit2,#mermaid-1731693973332 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1731693973332 .activeCrit0,#mermaid-1731693973332 .activeCrit1,#mermaid-1731693973332 .activeCrit2,#mermaid-1731693973332 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1731693973332 .doneCrit0,#mermaid-1731693973332 .doneCrit1,#mermaid-1731693973332 .doneCrit2,#mermaid-1731693973332 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1731693973332 .activeCritText0,#mermaid-1731693973332 .activeCritText1,#mermaid-1731693973332 .activeCritText2,#mermaid-1731693973332 .activeCritText3,#mermaid-1731693973332 .doneCritText0,#mermaid-1731693973332 .doneCritText1,#mermaid-1731693973332 .doneCritText2,#mermaid-1731693973332 .doneCritText3{fill:#000!important}#mermaid-1731693973332 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1731693973332 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1731693973332 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1731693973332 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1731693973332 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1731693973332 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1731693973332 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1731693973332 #compositionEnd,#mermaid-1731693973332 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1731693973332 #aggregationEnd,#mermaid-1731693973332 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1731693973332 #dependencyEnd,#mermaid-1731693973332 #dependencyStart,#mermaid-1731693973332 #extensionEnd,#mermaid-1731693973332 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1731693973332 .branch-label,#mermaid-1731693973332 .commit-id,#mermaid-1731693973332 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1731693973332{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <hr/> <h2 id="tweets">Tweets</h2> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p> <hr/> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code>-sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behavior, where trailing spaces are not required.)</p> <ul> <li>Unordered lists can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry><entry><title type="html">Sample Blog Post (HTML version)</title><link href="https://adrhill.github.io/iclr2025-sparse-autodiff/blog/distill-example2/" rel="alternate" type="text/html" title="Sample Blog Post (HTML version)"/><published>2025-04-28T00:00:00+08:00</published><updated>2025-04-28T00:00:00+08:00</updated><id>https://adrhill.github.io/iclr2025-sparse-autodiff/blog/distill-example2</id><content type="html" xml:base="https://adrhill.github.io/iclr2025-sparse-autodiff/blog/distill-example2/"><![CDATA[<p> This is a sample blog post written in HTML (while the other <a href="/iclr2025-sparse-autodiff/blog/distill-example/">sample post</a> is written in Markdown). Authors have the choice to write in HTML or Markdown. While Markdown is easier to write, HTML gives you more control over the layout of your post. Furthermore, Markdown often interacts in unexpected ways with MathJax and other HTML widgets. If you are having trouble with Markdown, try writing in HTML instead. </p> <p> Note: please use the table of contents as defined in the front matter rather than the traditional markdown styling. </p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code>$$</code>, like <code>$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code>$$</code> and place it as a separate paragraph. Here is an example: $$ \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) $$ </p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="images-and-figures">Images and Figures</h2> <p>Its generally a better idea to avoid linking to images hosted elsewhere - links can break and you might face losing important information in your blog post. You can display images from this repository using the following code:</p> <pre><code>{% include figure.html path="assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" %}</code></pre> <p>which results in the following image:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/iclr.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p> To ensure that there are no namespace conflicts, you must save your asset to your unique directory `/assets/img/2025-04-28-[SUBMISSION NAME]` within your submission. </p> <p> Please avoid using the direct HTML method of embedding images; they may not be properly resized. Some below complex ways to load images (note the different styles of the shapes/shadows): </p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/8.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/10.jpg" class="img-fluid z-depth-2" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/11.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/12.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-distill-example/7.jpg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3>Interactive Figures</h3> <p> Here's how you could embed interactive figures that have been exported as HTML files. Note that we will be using plotly for this demo, but anything built off of HTML should work. All that's required is for you to export your figure into HTML format, and make sure that the file exists in the `assets/html/[SUBMISSION NAME]/` directory in this repository's root directory. To embed it into any page, simply insert the following code anywhere into your page. </p> <pre><code>{% include [FIGURE_NAME].html %}</code></pre> <p> For example, the following code can be used to generate the figure underneath it. </p> <pre><code class="language-python">import pandas as pd
import plotly.express as px

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')

fig = px.density_mapbox(
    df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,
    center=dict(lat=0, lon=180), zoom=0, mapbox_style="stamen-terrain")
fig.show()

fig.write_html('./assets/html/2025-04-28-distill-example/plotly_demo_1.html')
</code></pre> And then include it with the following: <pre><code class="language-html">&lt;div class="l-page"&gt;
  &lt;iframe src="{{ 'assets/html/2025-04-28-distill-example/plotly_demo_1.html' | relative_url }}" frameborder='0' scrolling='no' height="600px" width="100%"&gt;&lt;/iframe&gt;
&lt;/div&gt;
</code></pre> Voila! <div class="l-page"> <iframe src="/iclr2025-sparse-autodiff/assets/html/2025-04-28-distill-example/plotly_demo_1.html" frameborder='0' scrolling='no' height="600px" width="100%"></iframe> </div> <h2 id="citations">Citations</h2> <p> Citations are then used in the article body with the <code>&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas. </p> <p> The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it. </p> <p> Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well - the authors are human and it's nice for them to have the community associate them with their work. </p> <h2 id="footnotes">Footnotes</h2> <p> Just wrap the text you would like to show up in a footnote in a <code>&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote> </p> <h2 id="code-blocks">Code Blocks</h2> <p> This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag as follows: </p> <pre><code>
{% highlight c++ linenos %}  <br/> code code code <br/> {% endhighlight %}

</code></pre> The keyword `linenos` triggers display of line numbers. You can try toggling it on or off yourself below: <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <h2 id="diagrams">Diagrams</h2> <p> This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="http://mermaid.js.org/">mermaid</a>, <a href="https://plantuml.com/">plantuml</a>, <a href="https://vega.github.io/vega-lite/">vega-lite</a>, etc. </p> <p> <b>Note</b>different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the first time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to the <a href="https://github.com/zhustec/jekyll-diagrams">jekyll-diagrams</a> README. </p> <p> <b>Note:</b> This is not supported for local rendering! </p> <p> The diagram below was generated by the following code: </p> <pre><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
{% endmermaid %}

</code></pre> <div class='jekyll-diagrams diagrams mermaid'> <svg id="mermaid-1731693974122" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1731693974122 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1731693974122 .node circle,#mermaid-1731693974122 .node ellipse,#mermaid-1731693974122 .node polygon,#mermaid-1731693974122 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1731693974122 .node.clickable{cursor:pointer}#mermaid-1731693974122 .arrowheadPath{fill:#333}#mermaid-1731693974122 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1731693974122 .edgeLabel{background-color:#e8e8e8}#mermaid-1731693974122 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1731693974122 .cluster text{fill:#333}#mermaid-1731693974122 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1731693974122 .actor{stroke:#ccf;fill:#ececff}#mermaid-1731693974122 text.actor{fill:#000;stroke:none}#mermaid-1731693974122 .actor-line{stroke:grey}#mermaid-1731693974122 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1731693974122 .messageLine0,#mermaid-1731693974122 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1731693974122 #arrowhead{fill:#333}#mermaid-1731693974122 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1731693974122 .messageText{fill:#333;stroke:none}#mermaid-1731693974122 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1731693974122 .labelText,#mermaid-1731693974122 .loopText{fill:#000;stroke:none}#mermaid-1731693974122 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1731693974122 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1731693974122 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1731693974122 .section{stroke:none;opacity:.2}#mermaid-1731693974122 .section0{fill:rgba(102,102,255,.49)}#mermaid-1731693974122 .section2{fill:#fff400}#mermaid-1731693974122 .section1,#mermaid-1731693974122 .section3{fill:#fff;opacity:.2}#mermaid-1731693974122 .sectionTitle0,#mermaid-1731693974122 .sectionTitle1,#mermaid-1731693974122 .sectionTitle2,#mermaid-1731693974122 .sectionTitle3{fill:#333}#mermaid-1731693974122 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1731693974122 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1731693974122 .grid path{stroke-width:0}#mermaid-1731693974122 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1731693974122 .task{stroke-width:2}#mermaid-1731693974122 .taskText{text-anchor:middle;font-size:11px}#mermaid-1731693974122 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1731693974122 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1731693974122 .taskText0,#mermaid-1731693974122 .taskText1,#mermaid-1731693974122 .taskText2,#mermaid-1731693974122 .taskText3{fill:#fff}#mermaid-1731693974122 .task0,#mermaid-1731693974122 .task1,#mermaid-1731693974122 .task2,#mermaid-1731693974122 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1731693974122 .taskTextOutside0,#mermaid-1731693974122 .taskTextOutside1,#mermaid-1731693974122 .taskTextOutside2,#mermaid-1731693974122 .taskTextOutside3{fill:#000}#mermaid-1731693974122 .active0,#mermaid-1731693974122 .active1,#mermaid-1731693974122 .active2,#mermaid-1731693974122 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1731693974122 .activeText0,#mermaid-1731693974122 .activeText1,#mermaid-1731693974122 .activeText2,#mermaid-1731693974122 .activeText3{fill:#000!important}#mermaid-1731693974122 .done0,#mermaid-1731693974122 .done1,#mermaid-1731693974122 .done2,#mermaid-1731693974122 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1731693974122 .doneText0,#mermaid-1731693974122 .doneText1,#mermaid-1731693974122 .doneText2,#mermaid-1731693974122 .doneText3{fill:#000!important}#mermaid-1731693974122 .crit0,#mermaid-1731693974122 .crit1,#mermaid-1731693974122 .crit2,#mermaid-1731693974122 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1731693974122 .activeCrit0,#mermaid-1731693974122 .activeCrit1,#mermaid-1731693974122 .activeCrit2,#mermaid-1731693974122 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1731693974122 .doneCrit0,#mermaid-1731693974122 .doneCrit1,#mermaid-1731693974122 .doneCrit2,#mermaid-1731693974122 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1731693974122 .activeCritText0,#mermaid-1731693974122 .activeCritText1,#mermaid-1731693974122 .activeCritText2,#mermaid-1731693974122 .activeCritText3,#mermaid-1731693974122 .doneCritText0,#mermaid-1731693974122 .doneCritText1,#mermaid-1731693974122 .doneCritText2,#mermaid-1731693974122 .doneCritText3{fill:#000!important}#mermaid-1731693974122 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1731693974122 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1731693974122 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1731693974122 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1731693974122 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1731693974122 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1731693974122 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1731693974122 #compositionEnd,#mermaid-1731693974122 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1731693974122 #aggregationEnd,#mermaid-1731693974122 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1731693974122 #dependencyEnd,#mermaid-1731693974122 #dependencyStart,#mermaid-1731693974122 #extensionEnd,#mermaid-1731693974122 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1731693974122 .branch-label,#mermaid-1731693974122 .commit-id,#mermaid-1731693974122 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1731693974122{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <h2 id="tweets">Tweets</h2> <p> An example of displaying a tweet: <div class='jekyll-twitter-plugin'><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> </p> <p> An example of pulling from a timeline: <div class='jekyll-twitter-plugin'><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> </p> <p> For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a> </p> <h2 id="blockquotes">Blockquotes</h2> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h2 id="layouts">Layouts</h2> The main text column is referred to as the body. It's the assumed layout of any direct descendants of the `d-article` element. <div class="fake-img l-body"> <p>.l-body</p> </div> For images you want to display a little larger, try `.l-page`: <div class="fake-img l-page"> <p>.l-page</p> </div> All of these have an outset variant if you want to poke out from the body text a little bit. For instance: <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> Occasionally you'll want to use the full browser width. For this, use `.l-screen`. You can also inset the element a little from the edge of the browser by using the inset variant. <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of `.l-body`-sized text except on mobile screen sizes. <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <h2 id="other-typography">Other Typography?</h2> <p> Emphasis, aka italics, with the <code>&lt;i&gt;&lt;/i&gt;</code> tag <i>emphasis</i>. </p> <p> Strong emphasis, aka bold, with <code>&lt;b&gt;&lt;/b&gt;</code> tag <b>bold</b>. </p> <p> Strikethrough ca be accomplished with the <code>&lt;s&gt;&lt;/s&gt;</code> tag. <s>Scratch this.</s> </p> <ul> <li>First ordered list item</li> <li>Another item</li> <ol> <li>Unordered sub-list. </li> </ol> <li>And another item.</li> </ul> <p> For code, the language can be specified in the class. For example, use <q>language-javascript</q> for Javascript and <q>language-python</q> for Python code. </p> <pre><code class="language-javascript">var s = "JavaScript syntax highlighting";
  alert(s);</code></pre> <pre><code class="language-python">s = "Python syntax highlighting"
  print(s)</code></pre> <pre><code class="language-python">No language indicated, so no syntax highlighting.</code></pre> <p> A table can be created with the <code>&lt;table&gt;</code> element. Below is an example </p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p> <blockquote>Blockquotes can be defined with the &gt;blockquote&lt; tag.</blockquote> </p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry><entry><title type="html">An Illustrated Guide to Automatic Sparse Differentiation</title><link href="https://adrhill.github.io/iclr2025-sparse-autodiff/blog/sparse-autodiff/" rel="alternate" type="text/html" title="An Illustrated Guide to Automatic Sparse Differentiation"/><published>2025-04-28T00:00:00+08:00</published><updated>2025-04-28T00:00:00+08:00</updated><id>https://adrhill.github.io/iclr2025-sparse-autodiff/blog/sparse-autodiff</id><content type="html" xml:base="https://adrhill.github.io/iclr2025-sparse-autodiff/blog/sparse-autodiff/"><![CDATA[ <div style="display: none"> $$ \newcommand{\colorf}[1]{\textcolor{RoyalBlue}{#1}} \newcommand{\colorh}[1]{\textcolor{RedOrange}{#1}} \newcommand{\colorg}[1]{\textcolor{PineGreen}{#1}} \newcommand{\colorv}[1]{\textcolor{VioletRed}{#1}} \def\sR{\mathbb{R}} \def\vx{\mathbf{x}} \def\vv{\mathbf{v}} \def\vb{\mathbf{e}} \newcommand{\vvc}[1]{\colorv{\vv_{#1}}} \newcommand{\vbc}[1]{\colorv{\vb_{#1}}} \newcommand{\dfdx}[2]{\frac{\partial f_{#1}}{\partial x_{#2}}(\vx)} \newcommand{\J}[2]{J_{#1}(#2)} \def\Jf{\J{f}{\vx}} \def\Jg{\J{g}{\vx}} \def\Jh{\J{h}{g(\vx)}} \def\Jfc{\colorf{\Jf}} \def\Jgc{\colorg{\Jg}} \def\Jhc{\colorh{\Jh}} \newcommand{\D}[2]{D{#1}(#2)} \def\Df{\D{f}{\vx}} \def\Dg{\D{g}{\vx}} \def\Dh{\D{h}{g(\vx)}} \def\Dfc{\colorf{\Df}} \def\Dgc{\colorg{\Dg}} \def\Dhc{\colorh{\Dh}} $$ </div> <p>First-order optimization is ubiquitous in Machine Learning (ML) but second-order optimization is much less common. The intuitive reason is that large gradients are cheap, whereas large Hessian matrices are expensive. Luckily, in numerous applications of ML to science or engineering, <strong>Hessians (and Jacobians) exhibit sparsity</strong>: most of their coefficients are known to be zero. Leveraging this sparsity can vastly <strong>accelerate Automatic Differentiation</strong> (AD) for Hessians and Jacobians, while decreasing its memory requirements. Yet, while traditional AD is available in many high-level programming languages, <strong>automatic sparse differentiation (ASD) is not as widely used</strong>. One reason is that the underlying theory was developed outside of the ML research ecosystem, by people more familiar with low-level programming languages.</p> <p>With this blog post, we aim to shed light on the inner workings of ASD, thus bridging the gap between the ML and AD communities. We start out with a short introduction to traditional AD, covering the computation of Jacobians in both forward and reverse mode. We then dive into the two primary components of ASD: <strong>sparsity pattern detection</strong> and <strong>matrix coloring</strong>. Having described the computation of sparse Jacobians, we move on to sparse Hessians.<br/> We conclude with a practical demonstration of ASD, providing performance benchmarks and guidance on when to use ASD over AD.</p> <h2 id="automatic-differentiation">Automatic Differentiation</h2> <p>Let us start by covering the fundamentals of traditional AD.</p> <p>AD makes use of the <strong>compositional structure</strong> of mathematical functions like deep neural networks. To make things simple, we will mainly look at a differentiable function $f$ composed of two differentiable functions $g: \sR^{n} \rightarrow \sR^{p}$ and $h: \sR^{p} \rightarrow \sR^{m}$, such that $f = h \circ g: \sR^{n} \rightarrow \sR^{m}$. The insights gained from this toy example should translate directly to more deeply composed functions $f = g^{(L)} \circ g^{(L-1)} \circ \cdots \circ g^{(1)}$. For ease of visualization, we work in small dimension, but the real benefits of ASD only appear as the dimension grows.</p> <h3 id="the-chain-rule">The chain rule</h3> <p>For a function $f: \sR^{n} \rightarrow \sR^{m}$ and a point of linearization $\vx \in \sR^{n}$, the Jacobian $J_f(\vx)$ is the $m \times n$ matrix of first-order partial derivatives, such that the $(i,j)$-th entry is</p> \[\big( \Jf \big)_{i,j} = \dfdx{i}{j} \in \sR \quad .\] <p>For a composed function</p> \[\colorf{f} = \colorh{h} \circ \colorg{g},\] <p>the <strong>multivariate chain rule</strong> tells us that we obtain the Jacobian of $f$ by <strong>multiplying</strong> the Jacobians of $h$ and $g$:</p> \[\Jfc = \Jhc \cdot \Jgc \quad .\] <p>Figure 1 illustrates this for $n=5$, $m=4$ and $p=3$. We will keep using these dimensions in following illustrations.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 1: Visualization of the multivariate chain rule for $f = h \circ g$. </div> <h3 id="ad-is-matrix-free">AD is matrix-free</h3> <p>We have seen how the chain rule translates the compositional structure of a function into the product structure of its Jacobian. Thanks to the small dimensions $n$, $m$ and $p$, this approach worked well on our toy example in Figure 1. In practice however, there is a problem: <strong>materializing intermediate Jacobian matrices is inefficient and often impossible</strong>, especially with a dense matrix format. Examples of dense matrix formats include NumPy’s <code class="language-plaintext highlighter-rouge">ndarray</code>, PyTorch’s <code class="language-plaintext highlighter-rouge">Tensor</code>, JAX’s <code class="language-plaintext highlighter-rouge">Array</code> and Julia’s <code class="language-plaintext highlighter-rouge">Matrix</code>.</p> <p>As a motivating example, let us take a look at a tiny convolutional layer. We consider a convolutional filter of size $5 \times 5$, a single input channel and a single output channel. An input of size $28 \times 28 \times 1$ results in a $576 \times 784$ Jacobian, the structure of which is shown in Figure 2. All the white coefficients are <strong>structural zeros</strong>.</p> <p>If we materialize the entire Jacobian as a dense matrix:</p> <ul> <li>we waste time computing coefficients which are mostly zero;</li> <li>we waste memory storing those zero coefficients.</li> </ul> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/big_conv_jacobian-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/big_conv_jacobian-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/big_conv_jacobian-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/big_conv_jacobian.png" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 2: Structure of the Jacobian of a tiny convolutional layer. </div> <p>In modern neural network architectures, which can contain over one trillion parameters, computing intermediate Jacobians is not only inefficient: it exceeds available memory. AD circumvents this limitation using <strong>linear maps</strong>, lazy operators that act exactly like matrices but without materializing them.</p> <p>The differential $Df: \vx \longmapsto Df(\vx)$ is a linear map which provides the best linear approximation of $f$ around a given point $\vx$. We can rephrase the chain rule as a <strong>composition of linear maps</strong> instead of a product of matrices:</p> \[\Dfc = \colorf{\D{(h \circ g)}{\vx}} = \Dhc \circ \Dgc .\] <p>Note that all terms in this formulation of the chain rule are linear maps. A new visualization for our toy example can be found in Figure 3b. Our illustrations distinguish between materialized matrices and linear maps by using solid and dashed lines respectively.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/chainrule_num.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 3a: Chain rule using materialized Jacobians (solid outline). </div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/matrixfree.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/matrixfree.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/matrixfree.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/matrixfree.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 3b: Chain rule using matrix-free linear maps (dashed outline). </div> <p><em>We visualize “matrix entries” in linear maps to build intuition. Even though following illustrations will sometimes put numbers onto these “matrix entries”, linear maps are best thought of as black-box functions.</em></p> <h3 id="forward-mode-ad">Forward-mode AD</h3> <p>Now that we have translated the compositional structure of our function $f$ into a compositional structure of linear maps, we can evaluate them by propagating <strong>materialized vectors</strong> through them.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_eval.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_eval.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_eval.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_eval.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 4: Evaluating linear maps in forward-mode. </div> <p>Figure 4 illustrates the propagation of a vector $\vv_1 \in \sR^n$ from the right-hand side. Since we propagate in the order of the original function evaluation, this is called <strong>forward-mode AD</strong>.</p> <p>In the first step, we evaluate $Dg(\vx)(\vv_1)$. Since this operation by definition corresponds to</p> \[\vvc{2} = \Dgc(\vvc{1}) = \Jgc \cdot \vvc{1} \;\in \sR^p ,\] <p>it is also commonly called a <strong>Jacobian-vector product</strong> (JVP) or <strong>pushforward</strong>. The resulting vector $\vv_2$ is then used to compute the subsequent JVP</p> \[\vvc{3} = \Dhc(\vvc{2}) = \Jhc \cdot \vvc{2} \;\in \sR^m ,\] <p>which in accordance with the chain rule is equivalent to</p> \[\vvc{3} = \Dfc(\vvc{1}) = \Jfc \cdot \vvc{1} ,\] <p>the JVP of our composed function $f$.</p> <p><strong>Note that we did not materialize intermediate Jacobians at any point</strong> – we only propagated vectors through linear maps.</p> <h3 id="reverse-mode-ad">Reverse-mode AD</h3> <p>We can also propagate vectors through our linear maps from the left-hand side, resulting in <strong>reverse-mode AD</strong>, shown in Figure 5. Just like forward-mode, reverse-mode is also matrix-free: <strong>no intermediate Jacobians are materialized at any point</strong>.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode_eval.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode_eval.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode_eval.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode_eval.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 5: Evaluating linear maps in reverse-mode. </div> <h3 id="from-linear-maps-back-to-jacobians">From linear maps back to Jacobians</h3> <p>The linear map formulation allows us to avoid intermediate Jacobian matrices in long chains of function compositions. But can we use this machinery to materialize the <strong>Jacobian</strong> of the composition $f$ itself?</p> <p>As shown in Figure 6, we can <strong>materialize Jacobians column by column</strong> in forward mode. Evaluating the linear map $Df(\vx)$ on the $i$-th standard basis vector materializes the $i$-th column of the Jacobian $J_f(\vx)$:</p> \[\Dfc(\vbc{i}) = \left( \Jfc \right)_\colorv{i,:}\] <p>Thus, materializing the full $m \times n$ Jacobian requires one JVP with each of the $n$ standard basis vectors of the <strong>input space</strong>.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 6: Forward-mode AD materializes Jacobians column-by-column. </div> <p>As illustated in Figure 7, we can also <strong>materialize Jacobians row by row</strong> in reverse mode. Unlike forward mode in Figure 6, this requires one VJP with each of the $m$ standard basis vectors of the <strong>output space</strong>.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/reverse_mode.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 7: Reverse-mode AD materializes Jacobians row-by-row. </div> <p>Since neural networks are usually trained using scalar loss functions, reverse-mode AD only requires the evaluation of a single VJP to compute a gradient. This makes it the method of choice for machine learners, who typically refer to reverse-mode AD as <em>backpropagation</em>.</p> <h2 id="sparse-automatic-differentiation">Sparse automatic differentiation</h2> <h3 id="sparse-matrices">Sparse matrices</h3> <p>Sparse matrices are matrices in which most elements are zero. We refer to linear maps as “sparse linear maps” if they materialize to sparse matrices.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_matrix.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_matrix.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_matrix.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_matrix.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_map.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_map.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_map.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_map.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 8: A sparse Jacobian and its corresponding sparse linear map. </div> <p>Whene functions have many inputs and many outputs, a given output does not always depend on every single input. This endows the corresponding Jacobian with a sparse structure, where zero coefficients denote an absence of (first-order) dependency. The previous case of a convolutional layer is a simple example. An even simpler example is an activation function applied elementwise, for which the Jacobian is the identity matrix.</p> <h3 id="leveraging-structure">Leveraging structure</h3> <p>Assuming we know the structure of the Jacobian, we can find orthogonal, non-overlapping columns or rows via a method called <strong>matrix coloring</strong> that we will go into more detail on later.</p> <p><strong>The core idea of ASD is that we can materialize multiple orthogonal columns or rows in a single evaluation.</strong> Since linear maps are additive, it always holds that</p> \[\Dfc(\vbc{i}+\ldots+\vbc{j}) = \underbrace{\Dfc(\vbc{i})}_{\left( \Jfc \right)_\colorv{i,:}} + \ldots + \underbrace{\Dfc(\vbc{j})}_{\left( \Jfc \right)_\colorv{j,:}} .\] <p>The right hand side summands each correspond to a column of the Jacobian. If the columns are <strong>orthogonal</strong> and their <strong>structure is known</strong>, the sum can be decomposed into its summands, materializing multiple columns in a single JVP.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 9: Materializing multiple orthogonal columns of a Jacobian in forward-mode. </div> <p>This specific example using JVPs corresponds to sparse forward-mode AD and is visualized in Figure 9, where all orthogonal columns have been colored in matching hues. By computing a single JVP with the vector $\mathbf{e}_1 + \mathbf{e}_2 + \mathbf{e}_5$, we materialize the sum of the first, second and fifth column of our Jacobian.</p> <p>Since we can assume we know the structure of the Jacobian, we can assign the values in the resulting vector to the correct Jacobian entries. The full forward-mode ASD materialization of our toy Jacobian is shown in Figure X.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_full.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_full.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_full.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_full.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_decompression.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_decompression.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_decompression.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_forward_decompression.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure X: Materializing a Jacobian with forward-mode ASD: (a) compressed evaluation of orthogonal columns (b) decompression to Jacobian matrix </div> <p>The same idea can also be applied to reverse mode AD, as shown in Figure Y. Instead of finding orthogonal column, we need to find orthogonal rows. We can then materialize multiple rows in a single VJP.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_full.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_full.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_full.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_full.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_decompression.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_decompression.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_decompression.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparse_ad_reverse_decompression.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure Y: Materializing a Jacobian with reverse-mode ASD: (a) compressed evaluation of orthogonal rows (b) decompression to Jacobian matrix </div> <h3 id="sparsity-pattern-detection-and-coloring">Sparsity pattern detection and coloring</h3> <p>Unfortunately, our initial assumption had a major flaw: Since AD only gives us a composition of linear maps and linear maps are black-box functions, the structure of the Jacobian is completely unknown.</p> <p><strong>We can’t tell which rows and columns are orthogonal without first materializing a Jacobian matrix.</strong> But if we fully materialize a Jacobian via traditional AD, ASD isn’t needed.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/coloring.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/coloring.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/coloring.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/coloring.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure 10: The two elementary steps in ASD: (a) sparsity pattern detection, (b) coloring of the sparsity pattern. </div> <p>The solution to this problem is shown in Figure 10: in order to find orthogonal columns (or rows), we don’t need to materialize the full Jacobian. Instead, it is enough to materialize a binary sparsity pattern of the Jacobian. This pattern contains enough information to color it.</p> <p>Performance is key: For one-off computations, these two steps need to be faster than the computation of columns or rows they allow us to skip. Otherwise, we didn’t gain any performance. As we will see in later benchmarks, this level of performance can be achieved. Additionally, if we need to compute Jacobians multiple times and are able to reuse the sparsity pattern, the cost of sparsity pattern detection and coloring can be amortized over time.</p> <h2 id="pattern-detection">Pattern detection</h2> <p>Sparsity pattern detection can be thought of as a binary version of AD. Mirroring the diversity of existing approaches to AD, there are also many possible approaches to sparsity pattern detection, each with their own advantages and tradeoffs.</p> <p>The method we will present here corresponds to a binary forward-mode AD system in which performance is gained by compressing matrix rows. <em>TODO: Alternatives include Bayesian probing, …</em> </p> <h3 id="compressing-jacobians">Compressing Jacobians</h3> <p>Our goal with sparsity pattern detection is to quickly materialize the binary pattern of the Jacobian. One way to achieve better performance than traditional AD is to compress of rows of matrices to index sets. The $i$-th row of the Jacobian corresponds to</p> \[\big( \Jf \big)_{i,:} = \left[\dfdx{i}{j}\right]_{1 \le j \le n} = \begin{bmatrix} \dfdx{i}{1} &amp; \ldots &amp; \dfdx{i}{n} \end{bmatrix} .\] <p>This can naively be represented in a computer program by computing and storing using the corresponding $n$ first-order partial derivatives. However, since we are only interested in the binary pattern</p> \[\left[\dfdx{i}{j} \neq 0\right]_{1 \le j \le n} ,\] <p>we can instead represent the sparsity pattern of the $i$-th column of a Jacobian by the corresponding <strong>index set of non-zero values</strong></p> \[\left\{j \;\Bigg|\; \dfdx{i}{j} \neq 0\right\} .\] <p>These equivalent sparsity pattern representations are illustrated in Figure 11.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern_representations.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern_representations.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern_representations.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/sparsity_pattern_representations.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 11: Equivalent sparsity pattern representations: (a) uncompressed matrix, (b) binary pattern, (c) index set (compressed along rows). </div> <p>(Since the method we are about to show is essentially a binary forward-mode AD system, we compress along rows.)</p> <h3 id="propagating-index-sets">Propagating index sets</h3> <p>Figure 12 shows the traditional forward-AD pass we want to avoid: propagating a full identity matrix through a linear map would materialize the Jacobian of $f$, but also all intermediate linear maps. As previously discussed, this is not a viable option due to its inefficiency and high memory requirements.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_naive.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_naive.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_naive.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_naive.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 12: Materializing a Jacobian forward-mode. Due to high memory requirements for intermediate Jacobians, this approach is inefficient or impossible. </div> <p>Instead, we <em>seed</em> an input vector with index sets corresponding to the compressed identity matrix. An alternative view on this vector is that it corresponds to the index set representation of the Jacobian of the input, since $\frac{\partial x_i}{\partial x_j} \neq 0$ only holds for $i=j$.</p> <p>Our goal is to propagate this index set such that we get an output vector of index sets that corresponds to the Jacobian sparsity pattern. This idea is visualized in Figure 13.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_sparse.svg-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_sparse.svg-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_sparse.svg-1400.webp"/> <img src="/iclr2025-sparse-autodiff/assets/img/2025-04-28-sparse-autodiff/forward_mode_sparse.svg" class="img-fluid" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Figure 13: Propagating an index set through a linear map to obtain a sparsity pattern. </div> <h3 id="alternative-evaluation">Alternative evaluation</h3> <p>Instead of going into implementation details, we want to provide some intuition on the second key ingredient of our forward-mode sparsity detection: <strong>alternative function evaluation</strong>.</p> <p>We will demonstrate this on a second toy example, the function</p> \[f(\vx) = x_1 + x_2x_3 + \text{sgn}(x_4) .\] <p>The corresponding computational graph is shown in Figure 14, where circular nodes correspond to elementary operators, in this case addition, multiplication and the sign function.</p> <div class="caption"> Figure 14: Computational graph of the function $ f(\vx) = x_1 + x_2x_3 + \text{sgn}(x_4) $, annotated with corresponding index sets. </div> <p>As discussed in the previous section, all inputs are seeded with their respective input index sets. Figure 14 annotates these index sets on the edges of the computational graph. Our system for sparsity detection must now perform an <strong>alternative evaluation of our computational graph</strong>. Instead of computing the original function, each operator must correctly propagate and accumulate the index sets of its inputs, depending on whether an operator has a non-zero derivative or not.</p> <p>Since addition and multiplication globally have non-zero derivatives with respect to both of their inputs, the index sets of their inputs are accumulated and propagated. The sign function has a zero-valued derivatives for any input value. It therefore doesn’t propagate the index set of its input. Instead, it returns an empty set.</p> <p><em>TODO: switch to multivariate function, quickly discuss resulting Jacobian.</em> </p> <h3 id="matrix-coloring">Matrix coloring</h3> <h2 id="second-order-sparse-differentiation">Second-order sparse differentiation</h2> <h2 id="demonstration">Demonstration</h2>]]></content><author><name>Anonymous</name></author><summary type="html"><![CDATA[Your blog post's abstract. Please add your abstract or summary here and not in the main body of your text. Do not include math/latex or hyperlinks.]]></summary></entry></feed>